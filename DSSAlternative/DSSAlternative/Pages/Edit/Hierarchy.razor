@page "/hierarchy"
@inherits DSSProject
@layout EditorLayout

<section>
    <div class="sheme basic-border">

        @if (Project.Created)
        {
            <HierarchyEditElement></HierarchyEditElement>
        }
        else
        {
            <Tab>
                <TabItem>
                    <Title><h4 class="tab-header">Создать с нуля</h4></Title>
                    <ChildContent>
                        <HierarchyEditElement></HierarchyEditElement>
                    </ChildContent>
                </TabItem>
                <TabItem>
                    <Title><h4 class="tab-header">Загрузить по шаблону</h4></Title>
                    <ChildContent>
                        <div>
                            @if (Templates.Any())
                            {
                                <section class="load-preset saved-session">
                                    <p class="load-note">
                                        Предустановленные шаблоны
                                    </p>
                                    <ul class="presets">
                                        <CascadingValue Value="this">
                                            @foreach (var template in Templates)
                                            {
                                                <li>
                                                    <HierTemplate Template="template"></HierTemplate>
                                                </li>
                                            }
                                        </CascadingValue>
                                    </ul>
                                </section>
                            }
                            <section>
                                <p class="load-note">
                                    Сохраненные шаблоны
                                </p>
                                @if (Account.CurrentUser.Templates.Any())
                                {
                                    <ul class="presets">
                                        <CascadingValue Value="this">
                                            @foreach (var template in Account.CurrentUser.Templates)
                                            {
                                                <li>
                                                    <HierTemplate Template="template"></HierTemplate>
                                                </li>
                                            }
                                        </CascadingValue>
                                    </ul>
                                }
                                else
                                {
                                    <span style="margin-left: 25px">
                                        Таких пока нет.
                                    </span>
                                }
                            </section>
                        @if (Account.CurrentUser.State != null && Account.CurrentUser.State.OpenedTemplates.Any())
                            {
                                <section class="saved-session">
                                    <p class="load-note">
                                        Активные задачи
                                    </p>

                                    @if (Account.CurrentUser.State != null)
                                    {
                                        <ul class="presets">
                                            <CascadingValue Value="this">
                                                @foreach (var template in Account.CurrentUser.State.OpenedTemplates)
                                                {
                                                    <li>
                                                        <HierTemplate Template="template"></HierTemplate>
                                                    </li>
                                                }
                                            </CascadingValue>
                                        </ul>
                                    }
                                </section>
                            }
                        </div>
                    </ChildContent>
                </TabItem>
                <TabItem>
                    <Title><h4 class="tab-header">Из JSON</h4></Title>
                    <ChildContent>
                        <div class="tab-section">
                            <section>
                                <p class="load-note">
                                    Когда-нибудь здесь можно будет выбрать .json файл из компьютера. Ну а пока только через ctrl-c
                                    <button class="action-button" @onclick="async () => { JSONText = await Clipboard.ReadTextAsync(); CheckJSON(); } ">
                                        Вставить из буфера обмена
                                    </button>
                                    <br />
                                    <button class="action-button" @onclick="async () => LoadJSON()">
                                        Загрузить JSON
                                    </button>
                                    <span>@JSONLoadResult</span>
                                </p>
                                <textarea class="load-json" rows="30" readonly>@JSONText</textarea>
                            </section>
                        </div>
                    </ChildContent>
                </TabItem>
            </Tab>
        }
    </div>
</section>


@code {
    [Inject]
    public Services.IClipboard Clipboard { get; set; }

    [Inject]
    public IDssTemplates TemplatesEditor { get; set; }
    public IEnumerable<ITemplate> Templates => TemplatesEditor.Templates;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dss.OnStateLoaded += StateHasChanged;
        Dss.OnProjectAdded += StateHasChanged;
        Dss.OnProjectSelectChange += project => StateHasChanged();
        Account.OnTemplatesChanged += StateHasChanged;
        TemplatesEditor.OnTemplatesLoaded += StateHasChanged;
    }

    private string JSONText { get; set; }
    private string JSONLoadResult { get; set; } = "Ожидание JSON...";
    private void CheckJSON()
    {
        string json = JSONText;
        try
        {
            ITemplate obj = JsonSerializer.Deserialize<Template>(json);
            JSONLoadResult = "JSON успешно прочитан, можно загружать";
        }
        catch (JsonException ex)
        {
            JSONLoadResult = $"Неверный формат данных, попробуйте ещё раз ({ex.Message})";
        }
    }
    private void LoadJSON()
    {
        string json = JSONText;
        if (string.IsNullOrEmpty(json))
        {
            JSONLoadResult = "JSON не указан";
            return;
        }
        try
        {
            ITemplate obj = JsonSerializer.Deserialize<Template>(json);
            Dss.SetProject(obj);
            JSONLoadResult = "JSON успешно загружен";
        }
        catch (JsonException ex)
        {
            JSONLoadResult = $"Неверный формат данных, попробуйте ещё раз ({ex.Message})";
            Console.WriteLine(ex.Message);
        }
    }

}
