@page "/view"
@inherits DSSProject
@layout EditorLayout


<style>
    .sheme {
    }

    .level {
        display: flex;
        align-items: center;
        border: 1px solid gainsboro;
    }

    .level-name {
        width: 20%;
        text-align: center;
    }

    .level-index {
        font-size: 0.9em;
        color: gray;
    }

    .level-text {
        font-size: 1.2em;
    }

    .level-elements {
        display: flex;
        flex-direction: row;
        width: 100%;
        flex-wrap: wrap;
        align-items: center;
        justify-content: center;
    }

    .node-element {
        display: block;
        padding: 10px;
        margin: 10px;
        border: 1px solid gray;
        text-align: center;
        border-radius: 4px;
        padding: 0;
        text-decoration: none;
    }

        .node-element a {
            text-decoration: none;
        }

    .node-element-name {
        font-size: 0.9em;
    }

    .filters {
        list-style: none;
        display: flex;
    }

        .filters li {
            padding: 5px 15px;
            border-bottom: 1px solid gainsboro;
        }

            .filters li:hover {
                background-color: gainsboro;
                cursor: pointer;
            }

        .filters .selected {
            background-color: gainsboro;
        }



    .good {
        background-color: #dfffdf;
    }

    .bad {
        background-color: #ffdee3;
    }

    .warn {
        background-color: antiquewhite;
    }

    .best {
        background-color: #dfffdf;
    }



    .actions-section {
        padding: 2px 5px;
        justify-content: center;
        align-items: center;
        height: 3em;
        display: none;
    }

    .action {
        display: flex;
        padding: 3px 5px;
        border: 1px solid gray;
        border-radius: 2px;
        font-size: 0.7em;
        margin: 5px 1px;
        align-items: center;
        cursor: pointer;
    }

    .action-header {
        padding: 10px 0;
        border-bottom: 1px solid gainsboro;
    }

    .node-element:hover .actions-section {
        display: flex;
    }

    .action-values-section {
        padding: 2px 5px;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 3em;
    }

    .node-element:hover .action-values-section {
        display: none;
    }

    .action-icon {
        height: 16px;
        margin: auto;
        opacity: 50%;
    }

    .action:hover {
        color: black;
    }

        .action:hover .action-icon {
            opacity: 100%;
        }

    .action-name {
        width: 80%;
        color: black;
    }

    .edit-criteria:hover {
    }

    .edit-relations:hover {
    }

    .clear-relations:hover {
        border: 1px solid red;
    }

    .clear-relations a:hover {
        color: red;
    }

    .property {
        font-size: 0.9em;
        margin: 0 6px;
    }

    .property-name {
        color: gray;
    }

    .property-value {
        color: black;
    }

    .filters-section {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
</style>

<section class="sheme">
    <h3 class="content-header-h">Схема задачи выбора</h3>
    <div>
        @if (!Relations.Consistent)
        {
            <Warning Header="Несогласованность" Message="Некоторые отношения являются несогласованными!"></Warning>
        }
        @if (!Relations.Known)
        {
            <Warning Header="Незаполненность!" Message="Некоторые отношения не заполнены"></Warning>
        }
    </div>
    <div class="filters-section">
        <ul class="filters">
            @foreach (var filter in Filters)
            {
                <li class="@(filter == Filter ? "selected" : "") " @onclick="@(() => SelectFilter(filter))">
                    @filter
                </li>
            }
        </ul>
        <div class="size-edit">
            <span>Размер элементов %: </span>
            <input type="number" @bind-value="@NodeSize" />
        </div>
    </div>

    @foreach (var levelGroup in Hierarchy.GroupedByLevel)
    {
        <div class="level">
            <div class="level-name">
                <span class="level-index">Уровень @levelGroup.Key</span>
                <br>
                <span class="level-text">@levelGroup.First().LevelName()</span>
            </div>
            <div class="level-elements">
                @foreach (var node in levelGroup)
                {
                    <a class="node-element" href="@RelationsLink" @onclick="() => SetNow(Relations[node].FirstRequired)" style="@($"width:{NodeSize}%")">
                        <div class="action-header @(GetClass(node))">
                            <span class="node-element-name">@ProcessDouble(node.Coefficient) - @node.Name</span>
                        </div>
                    </a>
                }
            </div>
        </div>
    }
</section>

<section>

    @if (Filter == Constistency)
    {
    <section>
        <h4>Пригодность отношений</h4>
        <div>
            <ColoredDefinition Color="#dfffdf" Message="отношения заполнены и согласованы"></ColoredDefinition>
            <ColoredDefinition Color="lightyellow" Message="отношения не заполнены"></ColoredDefinition>
            <ColoredDefinition Color="#ffdee3" Message="отношения не согласованы"></ColoredDefinition>
        </div>
    </section>
    }
    else if (Filter == FilterRating)
    {
        <section>
            <h4>Оптимальные варианты</h4>
            <div>
                <ColoredDefinition Color="#dfffdf" Message="Лучшая альтернатива"></ColoredDefinition>
                <ColoredDefinition Color="white" Message="Обычная альтернатива"></ColoredDefinition>
            </div>
        </section>
    }
</section>



@code {
    private int NodeSize { get; set; } = 20;

    private string ProcessDouble(double num)
    {
        if (double.IsNaN(num))
            return "~";
        if (double.IsInfinity(num))
            return "∞";
        return Math.Round(num, 2).ToString();
    }


    //Фильтры
    const string FilterRating = "По рейтингу критериев";
    const string Constistency = "По отношениям";

    public string[] Filters { get; set; } = new string[]
    {
            FilterRating,
            Constistency,
        };
    private string Filter { get; set; }

    private void SelectFilter(string text)
    {
        Filter = text;
    }



    private string GetClass(INode node)
    {
        string tag = "usual";
        switch (Filter)
        {
            case FilterRating:
                if (Hierarchy.Best(node.Level).Contains(node))
                    return "best";
                return "usual";

            case Constistency:
                double res = Relations[node].Mtx.Cr;
                if (!Relations[node].Known)
                    return "warn";
                if (!Relations[node].Consistent)
                    return "bad";
                return "good";

            default:
                return tag;
        }
    }
}