@page "/results"
@inherits DSSProject
@layout EditorLayout

@if(Project.Created && !Project.IsEmpty)
{
    <section class="res">
        @if (Relations.Correct)
        {
            <div class="sheme">
                <HierShemeBig ProjectSheme="Project" ViewSelection="HierShemeBig.ViewSelections.Best"></HierShemeBig>
            </div>
            <div class="res-info">
                @foreach (var levelGroup in GroupedResults())
                {
                    <section class="results-list">
                        <h4 class="level-header">
                            @HeaderText(levelGroup)
                        </h4>
                        <div>
                            <ul class="results">
                                @foreach (var node in levelGroup.OrderByDescending(n => n.Coefficient))
                                {
                                    <li>
                                        <span class="node-name">
                                            @node.Name
                                        </span>
                                        <span class="node-rating">
                                            @((node.Coefficient * 100).ToString("0.00"))
                                        </span>
                                        <div class="node-progress">
                                            <div class="progress-filler" style="width:@ReturnPrs(node)%" />
                                        </div>
                                    </li>
                                }
                            </ul>
                            <p class="level-best-nodes">
                                ЛУЧШИЙ ВЫБОР – <span class="node-best">@string.Join(", ", Hierarchy.Best(levelGroup.Key).Select(n => n.Name))</span>
                            </p>

                        </div>
                    </section>
                }

            </div>
        }
        else
        {
            <div class="sheme">
                @if (!Relations.Consistent)
                {
                    <div hidden>
                        <Warning Header="Несогласованность" Message="Некоторые отношения являются несогласованными!"></Warning>

                    </div>
                }
                @if (!Relations.Known)
                {
                    <div hidden>
                        <Warning Header="Незаполненность!" Message="Некоторые отношения не заполнены"></Warning>
                    </div>
                }
                <HierShemeBig ProjectSheme="Project" LinkType="@RelationsLink" ViewSelection="HierShemeBig.ViewSelections.Relations">

                </HierShemeBig>

                <div hidden>
                    <ColoredDefinition Color="#dfffdf" Message="известно и согласовано"></ColoredDefinition>
                    <ColoredDefinition Color="lightyellow" Message="неизвестность"></ColoredDefinition>
                    <ColoredDefinition Color="#ffdee3" Message="рассогласованность"></ColoredDefinition>
                </div>
            </div>

            <div class="sheme-info">
                <section class="sheme-info-total">
                    @*<h3>Отношения</h3>*@
                    <p>
                        <a href="view">
                            Старый обзор
                        </a>
                    </p>
                    <div class="info-details">
                        @if (!Relations.Consistent)
                        {
                            @foreach (var node in Project.UnconsistenctNodes())
                            {
                                <NodeRelations Node="node" Context="rel">
                                    <RelationView>
                                        <span>@rel.From.Name - @rel.To.Name</span>
                                    </RelationView>
                                </NodeRelations>
                            }
                        }
                        @if (!Relations.Known)
                        {
                            @foreach (var node in Project.UnknownNodes())
                            {
                                <NodeRelations Node="node" Context="rel" RelationFilter="rel => rel.Unknown">
                                    <RelationView>
                                        <span>@rel.From.Name ??? @rel.To.Name</span>
                                    </RelationView>
                                </NodeRelations>
                            }
                        }
                    </div>
                </section>
            </div>
        }
    </section>
}

@code{
    private string ReturnPrs(INode node)
    {
        return (node.Coefficient * 100).ToString("0");
    }

    private IEnumerable<IGrouping<int, INode>> GroupedResults()
    {
        return Hierarchy.GroupedByLevel.Where(g => g.Key != 0);
    }

    private string HeaderText(IGrouping<int, INode> group)
    {
        string name = group.First().LevelName();
        return $"{name} ур. {group.Key}";
    }

}