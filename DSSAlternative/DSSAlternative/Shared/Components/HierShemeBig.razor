@inherits DSSComponent

@if (!UseAdvancedGrouping)
{
    <section class="sheme">
    @foreach (var levelGroup in Grouped)
    {
        <div class="level">
            @if (ShowHeaders)
            {
                <div class="level-name">
                    <span class="level-index">Ур. @levelGroup.Key -</span>
                    <span class="level-text">@levelGroup.First().LevelName()</span>
                </div>
            }
            <div class="level-elements">
                @foreach (var node in levelGroup)
                {
                    <a class="node-element @(GetClass(node)) @(CssNode.GetCssClassesAdvanced(ProjectSheme, node, ViewSelection))" href="@LinkType" @onclick="() => SetNowMatched(node)">
                        <span>
                            @if (DisplayProperty != null)
                            {
                                @FormatNumber(DisplayProperty(node)) <span>| </span>
                            }
                            @node.Name
                        </span>
                    </a>
                }
            </div>
        </div>
    }
    </section>
}
else
{
    <section class="sheme">
        @foreach (var levelGroup in GroupedByGroup.GroupBy(g => g.First().Level))
        {
                <div class="level">
                @if (ShowHeaders)
                {
                        <div class="level-name">
                            <span class="level-text">Уровень @levelGroup.Key</span>
                        </div>
                }
                    <div class="level-elements-more">
                    @foreach (var nodeGroup in levelGroup)
                    {
                            <div class="level-elements">
                            <span class="level-index">@nodeGroup.Key :</span>
                            @foreach (var node in nodeGroup)
                            {

                                    <a class="node-element @(GetClass(node)) @(CssNode.GetCssClassesAdvanced(ProjectSheme, node, ViewSelection))" href="@LinkType" @onclick="() => SetNowMatched(node)">
                                            <span>
                                        @if (DisplayProperty != null)
                                        {
                                            @FormatNumber(DisplayProperty(node)) <span>| </span>
                                        }
                                        @node.Name
                                                </span>
                                            </a>
                            }
                            </div>
                    }
                    </div>
                </div>
        }
    </section>
}
@if (UseLegend)
{
    if(ViewSelection == ViewSelections.Selection)
    {
        <section>
            <ColoredDefinition ColorBorder="gray" Color="#b5e0ff" Message="Выбранный узел"></ColoredDefinition>
            <ColoredDefinition ColorBorder="gray" Color="#f3e0bc" Message="Контролирующие узлы"></ColoredDefinition>
            <ColoredDefinition ColorBorder="gray" Color="#ffdede" Message="Зависимые узлы"></ColoredDefinition>
            <ColoredDefinition ColorBorder="gray" Color="#f1f9ff" Message="Соседние узлы"></ColoredDefinition>
        </section>
    }
}



@code {
    [Parameter]
    public IProject ProjectSheme { get; set; }
    [Parameter]
    public bool UseEditing { get; set; }
    [Parameter]
    public bool UseAdvancedGrouping { get; set; }
    [Parameter]
    public bool UseLegend { get; set; } = true;

    [Parameter]
    public bool ShowHeaders { get; set; } = true;
    [Parameter]
    public Func<INode, double> DisplayProperty { get; set; } = (node) => node.Coefficient;

    [Parameter]
    public ViewSelections ViewSelection { get; set; } = HierShemeBig.ViewSelections.Selection;
    public enum ViewSelections
    {
        Selection, Best, Relations
    };

    [Parameter]
    public string LinkType { get; set; } = "relation-edit";

    private IEnumerable<IGrouping<int, INode>> Grouped => !UseEditing ? ProjectSheme.Grouped() : ProjectSheme.HierarchyEditing.GroupedByLevel;
    private IEnumerable<IGrouping<string, INode>> GroupedByGroup => !UseEditing ? ProjectSheme.HierarchyActive.GroupBy(n => n.Group) : ProjectSheme.HierarchyEditing.GroupBy(n => n.Group);


    private void SetNowMatched(INode node)
    {
        if(ViewSelection == ViewSelections.Selection)
        {
            ProjectSheme.SetNow(node);
        }
        else
        {
            var rel = ProjectSheme.Relations[node].FirstRequired;
            if(rel != null)
            {
                ProjectSheme.SetNow(rel);
            }
        }
    }

    private string GetClass(INode node)
    {
        return new CssNode(ProjectSheme, node, ViewSelection).CssClass();
    }
}

