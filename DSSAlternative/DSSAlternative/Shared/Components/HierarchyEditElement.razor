@inherits DSSProject

<div class="confirm">
    <div class="confirm-info">
        @if (Project.IsUpdateAvailable)
        {
            @if (!Project.Created)
            {
                <input class="add" type="button" value="Утвердить созданную иерархию" @onclick="UpdateHierarchy" />
            }
            else
            {
                <span class="not-saved">Есть несохраненные изменения в структуре</span>
                <input class="add" type="button" value="Подтвердить новую иерархию" @onclick="UpdateHierarchy" />
                <input class="add" type="button" value="Отменить изменения" @onclick="CancelHierarchyChanges" />
                <ul class="fails">
                    @if (Project.Created)
                    {
                        <li>
                            <span>
                                Все отношения будут сброшены
                            </span>
                        </li>
                    }
                </ul>
            }
        }
        else if (Project.UnsavedChanged && !Project.IsUpdateAvailable)
        {
            <span class="warning">В структуре иерархии обнаружены ошибки:</span>

            <ul class="fails">
                @foreach (var check in HierarchyEdit.Correctness.ErrorsList)
                {
                    <li>
                        <span>
                            @check.Message
                        </span>
                    </li>
                }
            </ul>
        }
        else
        {
            <span class="all-saved">Все изменения сохранены</span>
        }
    </div>
    <div class="information">
        <div>
            <span class="property-name">Уровней: </span>
            <span class="property-value">@HierarchyEdit.LevelsCount</span>
        </div>
        <div>
            <span class="property-name">Узлов: </span>
            <span class="property-value">@HierarchyEdit.Count()</span>
        </div>
        <div hidden>
            <span class="property-name">Отношений: </span>
            <span class="property-value">@HierarchyEdit.RelationsCount</span>
        </div>
        <div hidden>
            <span class="property-name">~ Времени на решение: </span>
            <span class="property-value">@HierarchyEdit.CountEstTime().Minutes мин. @HierarchyEdit.CountEstTime().Seconds сек.</span>
        </div>
    </div>
</div>

<Tab>
    <TabItem>
        <Title>
            <h3 class="tab-header">Структура иерархии</h3>
        </Title>
        <ChildContent>
            <div>
                @foreach (var levelGroup in HierarchyEdit.GroupedByLevel)
                {
                    <section class="level @(levelGroup.Key == 0 ? "main-goal-level" : "")">
                        <div class="level-name">
                            @*<span class="level-index">Уровень @levelGroup.Key</span>
                            <br>
                            <span>@levelGroup.ElementAt(0).LevelName()</span>
                            <br />*@
                            <span>Уровень @levelGroup.Key</span>
                            

                        </div>
                        <div class="level-elements">
                            @foreach (var node in levelGroup)
                            {
                                <div class="@HierClass(node) node-element" @onclick="@(() => NodeHovered = node)">
                                    <input class="input-text" type="text" @bind-value="@node.Name" />
                                    <input class="remove" type="button" value="X" @onclick="@(() => RemoveNode(node))" title="удалить этот элемент" />
                                </div>
                            }
                        </div>

                        <div class="level-add">
                            <input class="add" type="button" value="+" title="добавить новый элемент на этот уровень" @onclick="@(() => AddNode(levelGroup.Key))" />
                        </div>

                    </section>
                }
                <section class="level new-level">
                    <div class="level-name">
                        <span>Уровень @HierarchyEdit.LevelsCount</span>
                    </div>
                    <input class="add " type="button" value="добавить" title="добавить следующий уровень узлов" @onclick="@(() => AddNode(HierarchyEdit.LevelsCount))" />
                    <input class="add" type="button" value="+" style="visibility:hidden" />
                </section>
                <section style="display:flex">
                    <ColoredDefinition ColorBorder="orange" Color="White" Message="Контролирующие узлы"></ColoredDefinition>
                    <ColoredDefinition ColorBorder="red" Color="White" Message="Зависимые узлы"></ColoredDefinition>
                </section>
            </div>
        </ChildContent>
    </TabItem>
    <TabItem>
        <Title>
            <h3 class="tab-header">Редактирование узлов</h3>
        </Title>
        <ChildContent>
            <NodeInfo></NodeInfo>
        </ChildContent>
    </TabItem>
    <TabItem>
        <Title>
            <h3 class="tab-header">JSON</h3>
        </Title>
        <ChildContent>
            <p>
                <button class="action-button" @onclick="() => Clipboard.WriteTextAsync(JsonCurrent)">
                    Скопировать в буфер обмена
                </button>
            </p>
            <textarea rows="20" cols="75">
                @JsonCurrent
                    </textarea>
        </ChildContent>
    </TabItem>
</Tab>


@code {
    [Inject]
    public Services.IClipboard Clipboard { get; set; }
    [Inject]
    public IDssJson Json { get; set; }
    private string JsonCurrent => Json.ToJson(HierarchyEdit);

    private INode NodeHovered { get; set; }


    private IHierarchy HierarchyEdit => Project.HierarchyEditing;


    //Подтверждение иерархии
    private void UpdateHierarchy() => Project.UpdateHierarchy();
    private void CancelHierarchyChanges() => Project.UpdateHierarchy();


    //Редактирование иерархии
    private void AddNode(int level = -1)
    {
        level = level == -1 ? HierarchyEdit.LevelsCount - 1 : level;
        bool isAlternative = level == HierarchyEdit.MaxLevel || level == HierarchyEdit.MaxLevel + 1;

        string name = isAlternative ? $"А{HierarchyEdit.Alternatives.Count() + 1}" : $"К{HierarchyEdit.Criterias.Count() + 1}";

        string group = $"Уровень {level}";
        string groupIndex = $"Уровень {level - 1}";
        if (HierarchyEdit.Where(n => n.Level == level).FirstOrDefault() is INode nodeCurrentLevel)
        {
            group = nodeCurrentLevel.Group;
        }
        if (HierarchyEdit.Where(n => n.Level == level - 1).FirstOrDefault() is INode nodePrevLevel)
        {
            groupIndex = nodePrevLevel.Group;
        }

        INode newNode = new Node(level, name, group, groupIndex);
        newNode.SetHierarchy(HierarchyEdit);



    }
    private void RemoveNode(INode e)
    {
        if (e != HierarchyEdit.MainGoal)
        {
            if (NodeHovered == e)
            {
                NodeHovered = null;
            }
            e.RemoveFromHierarchy();
        }
    }
    private string HierClass(INode node)
    {
        return new CssNode(node, NodeHovered).CssClass();
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        Project.OnNodeChanged += StateHasChanged;
    }
}
