@using System.IO;
@inherits DSSComponentProject

<nav class="menu-projects">
    <h2 class="text-center">
        Список задач
    </h2>
    <div class="actions-panel status-panel">
        <button class="action-button save" @onclick="SaveProgress" title="Сохранить все текущие задачи">
            <img src="Images/save.svg" />
            <span>Сохранить все</span>
        </button>
        <button class="action-button load" @onclick="LoadProgress" title="Восстановить все ранее сохраненные задачи">
            <img src="Images/download.svg" />
            <span>Восстановить все</span>
        </button>
    </div>
    <ul class="task-menu">
        <CascadingValue Value="this">
            @foreach (var project in ProjectsCollection.ActiveProjects)
            {
                <li>
                    <ProjectItemComponent Project="project"></ProjectItemComponent>
                </li>
            }
        </CascadingValue>
    </ul>
    <div class="state-control">
        <button class="add-task action-button" @onclick="CreateProblem">
            <img src="Images/plus-square.svg" />
            <span>Создать новую задачу</span>
        </button>
        <InputFile OnChange="FileUpload"></InputFile>
    </div>
</nav>

@code {
    [Inject]
    public IFileService FileService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        ProjectsCollection.OnActiveProjectsChanged += StateHasChanged;
        ProjectsCollection.OnSelectedProjectChanged += proj => StateHasChanged();
    }

    private async Task FileUpload(InputFileChangeEventArgs e)
    {
        if(e.File == null)
        {
            return;
        }
        var projectTemplate = await FileService.TryReadFile<TemplateProject>(e.File);
        if(Project != null)
        {
            ProjectsCollection.AddProject(projectTemplate);
            Logger.AddUIInfo(Project, $"Загружена задача \"{projectTemplate.Name}\" из файла", $"Имя файла: {e.File.Name}");
        }
    }

    private void CreateProblem()
    {
        ProjectsCollection.AddProject();
        ProjectsCollection.SelectProject(ProjectsCollection.ActiveProjects.Last());
        Logger.AddUIInfo(Project, $"Создана новая задача", $"");
    }

    private void SaveProgress()
    {
        Account.SaveStateWithActiveProjects();
        Logger.AddUIInfo(Project, $"Все активные задачи сохранены", $"");
    }
    private void LoadProgress()
    {
        Account.LoadLastState();
        Logger.AddUIInfo(Project, $"Активные задачи восстановлены", $"");
    }
}