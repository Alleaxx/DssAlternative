@inherits DSSComponentParamNode

<section class="criteria-relations">
    @if (ShowHeader)
    {
        <div class="rel-menu-list-header @NodeRelClass()">
            <h3>
                @Node.Name
            </h3>
            <span class="cr">
                [@FormatNumber(Cr)]
            </span>
        </div>
    }
    <ul class="rel-menu-list">
        @foreach (var relation in ShowedRelations())
        {
            <li>
                <a class="rel-menu-element @RelationClass(relation)" @onclick="() => SelectRelation(relation)" href="@RelationsLink">
                    @RelationView.Invoke(relation)
                </a>
            </li>
        }
    </ul>
    @if (ShowState)
    {
        <p class="criteria-state">
            @if (IsNotConsistenct)
            {
                <span><b>↑</b> Нужна корректировка согласованности</span>
            }
            else if (IsUnknown)
            {
                <span><b>↑</b> Нужно заполнение</span>
            }
            else
            {
                <span><b>✓</b> Всё в порядке</span>
            }
        </p>
    }
    </section>

@code {
    [Parameter]
    public Predicate<INodeRelation> RelationFilter { get; set; } = rel => true;

    [Parameter]
    public bool ShowState { get; set; } = true;
    [Parameter]
    public bool ShowHeader { get; set; } = true;

    [Parameter]
    public RenderFragment<INodeRelation> RelationView { get; set; }


    private bool IsNotConsistenct => !Relations[Node].Consistent;
    private bool IsUnknown => !Relations[Node].Known;
    public double Cr => Relations[Node].Mtx.Cr;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Project.OnSelectedRelationChanged += () => StateHasChanged();
    }


    private string NodeRelClass()
    {
        var rel = Relations[Node].FirstRequired;
        return RelationClass(rel);
    }
    private string RelationClass(INodeRelation rel)
    {
        return new CssRelation(Project, rel).CssClass();
    }

    private IEnumerable<INodeRelation> ShowedRelations()
    {
        return Relations[Node].Required.Where(r => RelationFilter.Invoke(r));
    }
}
