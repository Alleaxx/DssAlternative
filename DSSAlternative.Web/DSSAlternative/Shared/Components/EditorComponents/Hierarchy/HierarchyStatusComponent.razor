@inherits DSSComponentProjectV2

@*
    Компонент статуса иерархии текущей задачи и возможных действий с ней
*@

<div class="status-bar">
    <div class="status-bar-info">
        @if (Project.IsUpdateAvailable)
        {
            @if (!Project.IsActiveHierCreated)
            {
                <div class="status-information">
                </div>
                <div class="hierarchy-actions">
                    <input class="add action-button" type="button" value="Утвердить созданную иерархию" @onclick="UpdateHierarchy" />
                </div>
            }
            else
            {
                <div class="status-information">
                    <span class="not-saved">
                        @HierStateInfo[HierarchyComparison.State]
                    </span>
                    @if (Project.IsActiveHierCreated)
                    {
                        @if (HierarchyComparison.State == HierarchyChangeState.StructureFieldsChanges || HierarchyComparison.State == HierarchyChangeState.CollectionChanges)
                        {
                            <ul class="fails">
                                <li>
                                    <span>
                                        Все отношения будут сброшены!
                                    </span>
                                </li>
                            </ul>
                        }
                    }
                </div>
                <div class="hierarchy-actions">
                    <input class="add action-button" type="button" value="Подтвердить новую иерархию" @onclick="UpdateHierarchy" />
                    <input class="cancel action-button" type="button" value="Отменить изменения" @onclick="CancelHierarchyChanges" />
                </div>
            }
        }
        else if (Project.UnsavedChanged && !Project.IsUpdateAvailable)
        {
            <div class="status-information">
                <span class="warning">В структуре иерархии обнаружены ошибки:</span>
                <ul class="fails">
                    @foreach (var check in HierarchyEditing.Correctness.GetChecksByState(CheckState.Warning))
                    {
                        <li>
                            <span>
                                @check.Message
                            </span>
                        </li>
                    }
                    @foreach (var check in HierarchyEditing.Correctness.GetChecksByState(CheckState.Error))
                    {
                        <li>
                            <span>
                                @check.Message
                            </span>
                        </li>
                    }
                </ul>
            </div>
            <div class="hierarchy-actions">
                <input class="cancel action-button" type="button" value="Отменить изменения" @onclick="CancelHierarchyChanges" />
            </div>
        }
        else
        {
            <div class="status-information">
                <span class="all-saved">Все изменения сохранены</span>
            </div>

            <div class="hierarchy-actions">
            </div>
        }
    </div>
    <div class="status-bar-properties">
        <div>
            <span class="property-name">Уровней: </span>
            <span class="property-value">@HierarchyEditing.LevelsCount</span>
        </div>
        <div>
            <span class="property-name">Узлов: </span>
            <span class="property-value">@HierarchyEditing.Nodes.Count()</span>
        </div>
    </div>
</div>

@code {
    private ComparisonHierarchy HierarchyComparison => Project.NodeMap.GetState(Project);
    private Dictionary<HierarchyChangeState, string> HierStateInfo = new Dictionary<HierarchyChangeState, string>()
    {
        [HierarchyChangeState.CollectionChanges] = "Есть несохраненные изменения в структуре и составе",
        [HierarchyChangeState.StructureFieldsChanges] = "Есть несохраненные изменения в структуре",
        [HierarchyChangeState.MinorFieldsChanges] = "Есть несохраненные незначительные изменения",
        [HierarchyChangeState.NoChanges] = "В иерархии нет изменений",
    };

    private void UpdateHierarchy()
    {
        StateHasChanged();
        this.Project.SetActiveHierarchyAsEditing();
        Logger.AddUIInfo(this.Project, $"Новая иерархия утверждена!", $"");
    }
    private void CancelHierarchyChanges()
    {
        this.Project.SetEditingHierarchyAsActive();
        Logger.AddUIInfo(this.Project, $"Изменения в иерархии отменены", $"");
    }
}
