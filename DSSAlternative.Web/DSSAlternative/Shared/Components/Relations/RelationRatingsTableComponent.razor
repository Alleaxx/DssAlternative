@inherits DSSComponentRelationV2


<section>
    <table class="matrix">
        <colgroup>
            <col style="width:50%" />
            <col style="width:50%" />
        </colgroup>
        <tbody>
            <tr>
                <th class="main-node" colspan="2">@Relation.Main.Name</th>
            </tr>
            <tr>
                <td class="criteria-info non-selectable @Relation.CriteriaContext.CssColorClass()" colspan="2">
                    <span>
                        Всего отношений по критерию заполнено @Relation.CriteriaContext.FilterComparesCount(c => !c.Unknown).Filtered / @Relation.CriteriaContext.FilterComparesCount(c => !c.Unknown).Total,
                    </span>
                    <span>
                        @if (Relation.CriteriaContext.Known)
                        {
                            @(Relation.CriteriaContext.Consistent ? " все согласованы" : " но они несогласованы! Необходимо их скорректировать")
                        }
                        else
                        {
                            <span> необходимо дозаполнить</span>
                        }

                    </span>
                </td>
            </tr>
            <tr>
                <th class="side-node from non-selectable">
                    <span>
                        @Relation.From.Name
                    </span>
                </th>
                <th class="side-node to non-selectable">
                    <span>
                        @Relation.To.Name
                    </span>
                </th>
            </tr>

            <tr>
                <RelationRatingItemComponent Rating="RatingNone" ColSpan="2" RelationParam="Relation">

                </RelationRatingItemComponent>
            </tr>

            <tr>
                <RelationRatingItemComponent Rating="RatingEqual" ColSpan="2" RelationParam="Relation">

                </RelationRatingItemComponent>
            </tr>
            <tr>
                <td style="padding:0;border-bottom: 1px solid gainsboro" colspan="2"></td>
            </tr>
            @foreach (var group in Ratings.Where(r => r.forRating.Value != 1))
            {
                <tr>
                    <RelationRatingItemComponent Rating="group.forRating" ColSpan="1" RelationParam="Relation">

                    </RelationRatingItemComponent>
                    <RelationRatingItemComponent Rating="group.toRating" ColSpan="1" RelationParam="Relation">

                    </RelationRatingItemComponent>
                </tr>
            }
            <tr>
                <td colspan="2" class="side-node non-selectable" style="border-top: 1px solid gainsboro; border-bottom: 1px solid gainsboro;">
                    <div style="display: flex; justify-content: space-between">
                        <a @onclick="SetPrev" href="#" role="button">
                            ← назад
                        </a>
                        <RelationRatingVerdictComponent RelationParam="Relation"></RelationRatingVerdictComponent>
                        <a @onclick="SetNext" href="#" role="button">
                            вперед →
                        </a>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</section>

@code {
    [Parameter]
    public bool UseSafeWarnings { get; set; } = true;

    private IRating RatingNone { get; set; }
    private IRating RatingEqual { get; set; }
    private IEnumerable<(IRating forRating, IRating toRating)> Ratings { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        CreateRatings();
        Project.OnRelationChanged += Project_OnRelationChanged;
        Project.OnSelectedRelationChanged += () =>
        {
            CreateRatings();
            StateHasChanged();
        };
    }

    private void Project_OnRelationChanged(IRelationsHierarchy obj)
    {
        StateHasChanged();
    }

    private void CreateRatings()
    {
        RatingNone = new Rating(0);
        RatingEqual = new Rating(1);
        Ratings = RatingSystem.RatingsFor(Relation);
    }



    protected IRelationNode Prev => Relations.PrevRequiredRel(RelationSelected);
    protected IRelationNode Next => Relations.NextRequiredRel(RelationSelected);

    private void SetNext()
    {
        SelectRelation(Next);
    }
    private void SetPrev()
    {
        SelectRelation(Prev);
    }
}