@inherits DSSComponent

<section class="scheme">
    @foreach (var level in Levels)
    {
        <div class="level">
            @if (ShowHeaders)
            {
                <div class="level-name">
                    <span class="level-text">Уровень @level</span>
                </div>
            }
            <div class="level-elements-more">
                @foreach (var nodeGroup in GetLevelNodeGroups(level))
                {
                    <div class="level-group">
                        <span class="level-index">@nodeGroup.Key :</span>
                        <div class="level-elements align-center">
                            @foreach (var node in nodeGroup)
                            {
                                <a class="node-element @(CssNode.GetCssClasses(ProjectActive, ProjectActive.NodeSelected, node, SchemeFilter))"
                                style="font-size:@(FontSizeEm.ToString().Replace(",","."))em;"
                                href="@LinkType" @onclick="() => SelectNodeOrRelation(node)">
                                    <span>
                                        @if (ShowProperty)
                                        {
                                            @FormatNumber(DisplayProperty(node)) <span>| </span>
                                        }
                                        @node.Name
                                    </span>
                                </a>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</section>
@if (UseLegend)
{
    <div style="margin-top: 20px">

    </div>
    <div class="filter-select">
        Выделение: 
        <select  id="filter" @bind="@SchemeFilterText">
            @if (UseEditing)
            {
                <option value="@SchemeFilters.Selection.ToString()">Связи активного элемента</option>
            }
            @if (!UseEditing)
            {
                <option value="@SchemeFilters.Best.ToString()">Лучший на каждом уровне</option>
            }
            @if (ProjectActive.IsActiveHierCreated && !UseEditing)
            {
                <option value="@SchemeFilters.Relations.ToString()">Отношения по элементу</option>
            }
        </select>
    </div>
    <section class="legend">

        @if(SchemeFilter == SchemeFilters.Selection)
        {
            <p style="font-size: 0.8em; margin-bottom: 5px; margin-top: 5px">
                ЛКМ по узлу для его выбора
            </p>
            <section>
                <ColoredDefinition ColorBorder="gray" Color="#b5e0ff" Message="Выбранный узел"></ColoredDefinition>
                <ColoredDefinition ColorBorder="gray" Color="#f3e0bc" Message="Контролирующие узлы"></ColoredDefinition>
                <ColoredDefinition ColorBorder="gray" Color="#ffdede" Message="Зависимые узлы"></ColoredDefinition>
                <ColoredDefinition ColorBorder="gray" Color="#ececec" Message="Соседние узлы"></ColoredDefinition>
            </section>
        }
        else if(SchemeFilter == SchemeFilters.Relations)
        {
            <section>
                <ColoredDefinition Color="#dfffdf" Message="известно и согласовано"></ColoredDefinition>
                <ColoredDefinition Color="lightyellow" Message="неизвестность"></ColoredDefinition>
                <ColoredDefinition Color="#ffdee3" Message="рассогласованность"></ColoredDefinition>
            </section>
        }
        else if(SchemeFilter == SchemeFilters.Best)
        {
            <section>
                <ColoredDefinition Color="#ebe3fc" Message="Лучший выбор!"></ColoredDefinition>
            </section>
        }
    </section>

}



@code {
    [Parameter]
    public IProject ProjectActive { get; set; }
    [Parameter]
    public bool UseEditing { get; set; }
    [Parameter]
    public bool UseLegend { get; set; } = true;
    [Parameter]
    public double FontSizeEm { get; set; } = 0.75;

    [Parameter]
    public bool ShowHeaders { get; set; } = true;
    [Parameter]
    public bool ShowProperty { get; set; } = true;
    [Parameter]
    public Func<INode, double> DisplayProperty { get; set; } = (node) => node.Coefficient;

    [Parameter]
    public SchemeFilters SchemeFilter { get; set; } = HierarchySchemeComponent.SchemeFilters.Selection;
    public enum SchemeFilters
    {
        /// <summary>
        /// Узлы помечается по выбранному элементу иерархии: соседи, подконтрольные и контролирующие узлы
        /// </summary>
        Selection,
        /// <summary>
        /// Узлы помечаются по лучшему элементу иерархии на уровне или в группе
        /// </summary>
        Best,
        /// <summary>
        /// Узлы помечаются по согласованности и заполненности отношений
        /// </summary>
        Relations
    };

    [Parameter]
    public string LinkType { get; set; } = "relation-edit";

    private string SchemeFilterText
    {
        get => SchemeFilter.ToString();
        set
        {
            SchemeFilter = Enum.Parse<SchemeFilters>(value);
        }
    }

    private IHierarchy UsedHierarchy => UseEditing ? ProjectActive.HierarchyEditing : ProjectActive.HierarchyActive;
    private IEnumerable<IGrouping<int, INode>> NodesGroupedByLevel => UsedHierarchy.NodesGroupedByLevel();
    private IEnumerable<IGrouping<string, INode>> NodesGroupedByGroup => UsedHierarchy.NodesGroupedByGroup();


    private IEnumerable<int> Levels => Enumerable.Range(0, ProjectActive.HierarchyEditing.LevelsCount);
    private IEnumerable<IGrouping<string, INode>> GetLevelNodeGroups(int level)
    {
        return UseEditing
        ? ProjectActive.HierarchyEditing.Nodes.Where(n => n.Level == level).GroupBy(g => g.Group)
        : ProjectActive.HierarchyActive.Nodes.Where(n => n.Level == level).GroupBy(g => g.Group);
    }


    //Выбираем узел или отношение, в зависимости от режима
    private void SelectNodeOrRelation(INode node)
    {
        if(SchemeFilter == SchemeFilters.Selection)
        {
            ProjectActive.SelectNode(node);
        }
        else
        {
            var rel = ProjectActive.Relations[node].FirstRequired;
            if(rel != null)
            {
                ProjectActive.SelectNodeRelation(rel);
            }
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        foreach(var group in NodesGroupedByGroup)
        {
            Console.WriteLine($"Группа {group.Key}, первый уровень {group.First().Level} ({group.First().Name})");
        }
    }
}

